set default=0
set timeout=5

# Load essential modules for both UEFI and BIOS boot
insmod part_msdos
insmod part_gpt
insmod fat
insmod iso9660
insmod chain
insmod multiboot2
insmod efi_gop
insmod efi_uga

# Force text mode and enable serial console for early OS output
insmod serial
set gfxpayload=text
serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1
terminal_input serial console
terminal_output serial console

# Auto-detect boot mode
if [ "${grub_platform}" == "efi" ]; then
    echo "UEFI boot detected"
else
    echo "Legacy BIOS boot detected"
fi

# Primary boot option - works on both UEFI and BIOS
menuentry "dex-os-64 (BIOS/Legacy compatible)" {
    echo "Loading 32-bit loader and 64-bit kernel..."
    echo "Boot mode: ${grub_platform}"
    multiboot2 /boot/loader32.elf
    module2 /boot/kernel64.bin
    echo "Starting boot sequence..."
    boot
}

# UEFI-specific option (only works on UEFI systems)
menuentry "dex-os-64 (UEFI native)" --class efi {
    if [ "${grub_platform}" != "efi" ]; then
        echo "Error: UEFI boot requested but not in UEFI mode"
        echo "Use the BIOS/Legacy option instead"
        sleep 3
        return
    fi
    
    if [ -f ($root)/EFI/BOOT/BOOTX64.EFI ]; then
        echo "Chainloading UEFI application..."
        chainloader ($root)/EFI/BOOT/BOOTX64.EFI
        boot
    elif [ -f ($root)/EFI/BOOT/BOOTAA64.EFI ]; then
        echo "Chainloading ARM64 UEFI application..."
        chainloader ($root)/EFI/BOOT/BOOTAA64.EFI
        boot
    else
        echo "No UEFI application found in EFI/BOOT/"
        sleep 3
    fi
}

# Alternative kernel option (if available)
menuentry "dex-os-64 (Alternative kernel)" {
    if [ -f ($root)/boot/kernel.elf ]; then
        echo "Loading alternative kernel..."
        echo "Boot mode: ${grub_platform}"
        multiboot2 /boot/kernel.elf
        boot
    else
        echo "Alternative kernel not found"
        sleep 3
    fi
}
